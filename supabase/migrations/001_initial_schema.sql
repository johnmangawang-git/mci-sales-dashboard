-- Create tables for Sales Dashboard

-- Users table (extends auth.users)
CREATE TABLE IF NOT EXISTS public.profiles (
    id UUID REFERENCES auth.users(id) PRIMARY KEY,
    email TEXT,
    full_name TEXT,
    avatar_url TEXT,
    role TEXT DEFAULT 'sales_manager',
    preferences JSONB DEFAULT '{}'::JSONB,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Sales data table
CREATE TABLE IF NOT EXISTS public.sales_data (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id UUID REFERENCES public.profiles(id) NOT NULL,
    date DATE NOT NULL,
    region TEXT NOT NULL,
    product_category TEXT NOT NULL,
    product_name TEXT,
    sales_rep TEXT,
    customer_segment TEXT,
    units_sold INTEGER,
    revenue DECIMAL(12, 2),
    profit DECIMAL(12, 2),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Targets table
CREATE TABLE IF NOT EXISTS public.targets (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id UUID REFERENCES public.profiles(id) NOT NULL,
    period_type TEXT NOT NULL, -- 'monthly', 'quarterly', 'yearly'
    period_value TEXT NOT NULL, -- '2023-10', '2023-Q4', '2023'
    target_value DECIMAL(12, 2) NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    UNIQUE(user_id, period_type, period_value)
);

-- Team members table
CREATE TABLE IF NOT EXISTS public.team_members (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id UUID REFERENCES public.profiles(id) NOT NULL,
    name TEXT NOT NULL,
    email TEXT,
    role TEXT,
    quota DECIMAL(12, 2),
    region TEXT,
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Activities table
CREATE TABLE IF NOT EXISTS public.activities (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id UUID REFERENCES public.profiles(id) NOT NULL,
    team_member_id BIGINT REFERENCES public.team_members(id),
    activity_type TEXT NOT NULL, -- 'call', 'meeting', 'demo', 'email'
    activity_date DATE NOT NULL,
    description TEXT,
    outcome TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Enable Row Level Security
ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.sales_data ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.targets ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.team_members ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.activities ENABLE ROW LEVEL SECURITY;

-- Create policies
CREATE POLICY "Users can view own profile" ON public.profiles
    FOR SELECT USING (auth.uid() = id);

CREATE POLICY "Users can update own profile" ON public.profiles
    FOR UPDATE USING (auth.uid() = id);

CREATE POLICY "Users can view own sales data" ON public.sales_data
    FOR SELECT USING (auth.uid() = user_id);

CREATE POLICY "Users can insert own sales data" ON public.sales_data
    FOR INSERT WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update own sales data" ON public.sales_data
    FOR UPDATE USING (auth.uid() = user_id);

CREATE POLICY "Users can view own targets" ON public.targets
    FOR SELECT USING (auth.uid() = user_id);

CREATE POLICY "Users can manage own targets" ON public.targets
    FOR ALL USING (auth.uid() = user_id);

CREATE POLICY "Users can view own team members" ON public.team_members
    FOR SELECT USING (auth.uid() = user_id);

CREATE POLICY "Users can manage own team members" ON public.team_members
    FOR ALL USING (auth.uid() = user_id);

CREATE POLICY "Users can view own activities" ON public.activities
    FOR SELECT USING (auth.uid() = user_id);

CREATE POLICY "Users can manage own activities" ON public.activities
    FOR ALL USING (auth.uid() = user_id);

-- Create indexes for better performance
CREATE INDEX IF NOT EXISTS sales_data_user_id_idx ON public.sales_data(user_id);
CREATE INDEX IF NOT EXISTS sales_data_date_idx ON public.sales_data(date);
CREATE INDEX IF NOT EXISTS sales_data_region_idx ON public.sales_data(region);
CREATE INDEX IF NOT EXISTS sales_data_product_category_idx ON public.sales_data(product_category);
CREATE INDEX IF NOT EXISTS targets_user_id_idx ON public.targets(user_id);
CREATE INDEX IF NOT EXISTS team_members_user_id_idx ON public.team_members(user_id);
CREATE INDEX IF NOT EXISTS activities_user_id_idx ON public.activities(user_id);